// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tienda.Soporte.Infraestructura.Persistence;

namespace Tienda.Soporte.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201106013734_create")]
    partial class create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Cita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPrevista")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SoporteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("citaId");

                    b.HasIndex("SoporteId");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.CitaTecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TecnicoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("citatecnicoId");

                    b.HasIndex("CitaId");

                    b.HasIndex("TecnicoId");

                    b.ToTable("CitaTecnico");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnName("direccion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("clienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.FormTrabajo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CitaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ClienteConfirma")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaForm")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrabajoRealizado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("formTrabajoId");

                    b.HasIndex("CitaId");

                    b.ToTable("FormTrabajo");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Soporte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Costo")
                        .HasColumnName("costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Estado")
                        .HasColumnName("estado")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAnulacion")
                        .HasColumnName("fechaAnulacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnName("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCulminacion")
                        .HasColumnName("fechaCulminacion")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("soporteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Soporte");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.SoporteProducto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SoporteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("soporteProductoId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("SoporteId");

                    b.ToTable("SoporteProducto");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Tecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("tecnicoId");

                    b.ToTable("Tecnico");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Cita", b =>
                {
                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Soporte", "Soporte")
                        .WithMany()
                        .HasForeignKey("SoporteId");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.CitaTecnico", b =>
                {
                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId");

                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Tecnico", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Cliente", b =>
                {
                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.Email.EmailValue", "Correo", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("correo")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PersonNameValue", "Apellidos", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("apellidos")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PersonNameValue", "Nombres", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("nombres")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PhoneNumber.PhoneNumberValue", "Telefono", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("telefono")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.FormTrabajo", b =>
                {
                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Cita", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaId");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Soporte", b =>
                {
                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.Descripcion.DescripcionValue", "Descripcion", b1 =>
                        {
                            b1.Property<Guid>("SoporteId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("descripcion")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SoporteId");

                            b1.ToTable("Soporte");

                            b1.WithOwner()
                                .HasForeignKey("SoporteId");
                        });
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.SoporteProducto", b =>
                {
                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId");

                    b.HasOne("Tienda.Soporte.Domain.Model.Soporte.Soporte", "Soporte")
                        .WithMany()
                        .HasForeignKey("SoporteId");
                });

            modelBuilder.Entity("Tienda.Soporte.Domain.Model.Soporte.Tecnico", b =>
                {
                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.Email.EmailValue", "Correo", b1 =>
                        {
                            b1.Property<Guid>("TecnicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TecnicoId");

                            b1.ToTable("Tecnico");

                            b1.WithOwner()
                                .HasForeignKey("TecnicoId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PersonNameValue", "Apellidos", b1 =>
                        {
                            b1.Property<Guid>("TecnicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TecnicoId");

                            b1.ToTable("Tecnico");

                            b1.WithOwner()
                                .HasForeignKey("TecnicoId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PersonNameValue", "Nombres", b1 =>
                        {
                            b1.Property<Guid>("TecnicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TecnicoId");

                            b1.ToTable("Tecnico");

                            b1.WithOwner()
                                .HasForeignKey("TecnicoId");
                        });

                    b.OwnsOne("Tienda.SharedKernel.ValueObjects.PhoneNumber.PhoneNumberValue", "Telefono", b1 =>
                        {
                            b1.Property<Guid>("TecnicoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TecnicoId");

                            b1.ToTable("Tecnico");

                            b1.WithOwner()
                                .HasForeignKey("TecnicoId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
